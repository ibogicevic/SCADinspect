
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package scadinspect.parser.generated;

import scadinspect.parser.ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class OpenScadParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return OpenScadSymbols.class;
}

  /** Default constructor. */
  @Deprecated
  public OpenScadParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public OpenScadParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public OpenScadParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\002\000\002\002" +
    "\004\000\002\002\004\000\002\003\003\000\002\003\005" +
    "\000\002\003\003\000\002\003\003\000\002\003\011\000" +
    "\002\003\013\000\002\004\002\000\002\004\004\000\002" +
    "\005\006\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\003" +
    "\000\002\007\003\000\002\007\005\000\002\010\007\000" +
    "\002\011\002\000\002\011\004\000\002\011\004\000\002" +
    "\012\003\000\002\012\005\000\002\012\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\006\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\005\000\002\015\003\000\002\015" +
    "\003\000\002\015\007\000\002\015\011\000\002\015\005" +
    "\000\002\015\006\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\005\000\002\015\007\000\002" +
    "\015\006\000\002\015\006\000\002\015\007\000\002\015" +
    "\007\000\002\015\007\000\002\016\002\000\002\016\003" +
    "\000\002\017\007\000\002\017\004\000\002\017\007\000" +
    "\002\017\013\000\002\017\007\000\002\017\011\000\002" +
    "\020\003\000\002\020\005\000\002\021\003\000\002\021" +
    "\003\000\002\022\004\000\002\022\002\000\002\023\003" +
    "\000\002\023\003\000\002\023\006\000\002\024\002\000" +
    "\002\024\003\000\002\024\006\000\002\025\003\000\002" +
    "\025\005\000\002\026\002\000\002\026\003\000\002\026" +
    "\006\000\002\027\003\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\044\002\000\005\016\006\014\007\033\011" +
    "\022\012\017\013\031\014\026\015\005\016\004\020\020" +
    "\033\006\037\015\050\030\052\021\053\011\054\010\001" +
    "\002\000\006\041\uffe5\047\315\001\002\000\004\041\uffe0" +
    "\001\002\000\046\002\ufffd\005\ufffd\006\ufffd\007\ufffd\011" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\020\ufffd" +
    "\033\ufffd\037\ufffd\040\ufffd\050\ufffd\052\ufffd\053\ufffd\054" +
    "\ufffd\001\002\000\044\002\000\005\016\006\014\007\033" +
    "\011\022\012\017\013\031\014\026\015\005\016\004\020" +
    "\020\033\006\037\015\050\030\052\021\053\011\054\010" +
    "\001\002\000\030\007\033\011\022\012\017\013\031\014" +
    "\026\015\005\016\112\050\030\052\021\053\011\054\010" +
    "\001\002\000\030\007\033\011\022\012\017\013\031\014" +
    "\026\015\005\016\112\050\030\052\021\053\011\054\010" +
    "\001\002\000\050\002\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\020\uffef\033\uffef\037\uffef\040\uffef\050\uffef\052\uffef\053" +
    "\uffef\054\uffef\001\002\000\050\002\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\310\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\020\uffee\033\uffee\037\uffee\040\uffee\050\uffee" +
    "\052\uffee\053\uffee\054\uffee\001\002\000\004\016\300\001" +
    "\002\000\042\005\016\006\014\007\033\011\022\012\017" +
    "\013\031\014\026\015\005\016\004\033\006\037\015\040" +
    "\ufff7\050\030\052\021\053\011\054\010\001\002\000\004" +
    "\016\257\001\002\000\004\041\uffe3\001\002\000\044\002" +
    "\000\005\016\006\014\007\033\011\022\012\017\013\031" +
    "\014\026\015\005\016\004\020\020\033\006\037\015\050" +
    "\030\052\021\053\011\054\010\001\002\000\030\007\033" +
    "\011\022\012\017\013\031\014\026\015\005\016\112\050" +
    "\030\052\021\053\011\054\010\001\002\000\004\041\uffe4" +
    "\001\002\000\004\002\254\001\002\000\004\041\251\001" +
    "\002\000\046\002\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\020\ufffb\033" +
    "\ufffb\037\ufffb\040\ufffb\050\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\001\002\000\004\041\uffe1\001\002\000\046\002\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\020\ufffa\033\ufffa\037\ufffa\040\ufffa\050" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\001\002\000\030\007\033" +
    "\011\022\012\017\013\031\014\026\015\005\016\112\050" +
    "\030\052\021\053\011\054\010\001\002\000\004\041\uffe2" +
    "\001\002\000\034\007\033\011\022\012\017\013\031\014" +
    "\026\015\005\016\112\033\113\037\114\050\030\052\021" +
    "\053\011\054\010\001\002\000\004\041\034\001\002\000" +
    "\036\012\037\013\046\014\044\016\047\017\041\021\036" +
    "\022\051\023\045\024\053\041\050\043\040\050\042\056" +
    "\043\057\035\001\002\000\036\012\037\013\046\014\044" +
    "\016\047\017\041\021\036\022\051\023\045\024\053\041" +
    "\050\043\040\050\042\056\043\057\035\001\002\000\056" +
    "\010\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\051\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\001\002\000\004\041\243\001\002" +
    "\000\050\007\171\011\167\012\166\013\046\014\044\015" +
    "\163\016\047\017\041\021\036\022\051\023\045\024\053" +
    "\036\145\041\050\043\040\044\uffaf\050\042\056\043\057" +
    "\035\001\002\000\056\010\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\051\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\001\002\000" +
    "\036\012\037\013\046\014\044\016\047\017\041\021\036" +
    "\022\051\023\045\024\053\041\050\043\040\050\042\056" +
    "\043\057\035\001\002\000\036\012\037\013\046\014\044" +
    "\016\047\017\041\021\036\022\051\023\045\024\053\041" +
    "\050\043\040\050\042\056\043\057\035\001\002\000\004" +
    "\041\155\001\002\000\056\010\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\051" +
    "\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\001\002" +
    "\000\004\041\150\001\002\000\060\010\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\041\133\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\051\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\057\uffdb\001\002\000\036\012\037\013\046\014\044\016" +
    "\047\017\041\021\036\022\051\023\045\024\053\041\050" +
    "\043\040\050\042\056\043\057\035\001\002\000\056\010" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\042\uffde\043\uffde\044" +
    "\uffde\045\uffde\046\uffde\051\uffde\053\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\001\002\000\044\025\067\026\063\027" +
    "\065\030\071\031\055\032\072\034\070\042\061\043\060" +
    "\045\073\046\057\051\074\053\062\054\066\055\056\056" +
    "\064\057\054\001\002\000\056\010\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\051\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\001" +
    "\002\000\036\012\037\013\046\014\044\016\047\017\041" +
    "\021\036\022\051\023\045\024\053\041\050\043\040\050" +
    "\042\056\043\057\035\001\002\000\036\012\037\013\046" +
    "\014\044\016\047\017\041\021\036\022\051\023\045\024" +
    "\053\041\050\043\040\050\042\056\043\057\035\001\002" +
    "\000\036\012\037\013\046\014\044\016\047\017\041\021" +
    "\036\022\051\023\045\024\053\041\050\043\040\050\042" +
    "\056\043\057\035\001\002\000\036\012\037\013\046\014" +
    "\044\016\047\017\041\021\036\022\051\023\045\024\053" +
    "\041\050\043\040\050\042\056\043\057\035\001\002\000" +
    "\036\012\037\013\046\014\044\016\047\017\041\021\036" +
    "\022\051\023\045\024\053\041\050\043\040\050\042\056" +
    "\043\057\035\001\002\000\034\007\033\011\022\012\017" +
    "\013\031\014\026\015\005\016\112\033\113\037\114\050" +
    "\030\052\021\053\011\054\010\001\002\000\036\012\037" +
    "\013\046\014\044\016\047\017\041\021\036\022\051\023" +
    "\045\024\053\041\050\043\040\050\042\056\043\057\035" +
    "\001\002\000\036\012\037\013\046\014\044\016\047\017" +
    "\041\021\036\022\051\023\045\024\053\041\050\043\040" +
    "\050\042\056\043\057\035\001\002\000\036\012\037\013" +
    "\046\014\044\016\047\017\041\021\036\022\051\023\045" +
    "\024\053\041\050\043\040\050\042\056\043\057\035\001" +
    "\002\000\036\012\037\013\046\014\044\016\047\017\041" +
    "\021\036\022\051\023\045\024\053\041\050\043\040\050" +
    "\042\056\043\057\035\001\002\000\036\012\037\013\046" +
    "\014\044\016\047\017\041\021\036\022\051\023\045\024" +
    "\053\041\050\043\040\050\042\056\043\057\035\001\002" +
    "\000\036\012\037\013\046\014\044\016\047\017\041\021" +
    "\036\022\051\023\045\024\053\041\050\043\040\050\042" +
    "\056\043\057\035\001\002\000\004\016\103\001\002\000" +
    "\036\012\037\013\046\014\044\016\047\017\041\021\036" +
    "\022\051\023\045\024\053\041\050\043\040\050\042\056" +
    "\043\057\035\001\002\000\036\012\037\013\046\014\044" +
    "\016\047\017\041\021\036\022\051\023\045\024\053\041" +
    "\050\043\040\050\042\056\043\057\035\001\002\000\036" +
    "\012\037\013\046\014\044\016\047\017\041\021\036\022" +
    "\051\023\045\024\053\041\050\043\040\050\042\056\043" +
    "\057\035\001\002\000\036\012\037\013\046\014\044\016" +
    "\047\017\041\021\036\022\051\023\045\024\053\041\050" +
    "\043\040\050\042\056\043\057\035\001\002\000\044\025" +
    "\067\026\063\027\065\030\071\031\055\032\072\034\070" +
    "\035\076\043\060\045\073\046\057\051\074\053\062\054" +
    "\066\055\056\056\064\057\054\001\002\000\036\012\037" +
    "\013\046\014\044\016\047\017\041\021\036\022\051\023" +
    "\045\024\053\041\050\043\040\050\042\056\043\057\035" +
    "\001\002\000\056\010\uffc2\025\067\026\063\027\065\030" +
    "\071\031\055\032\072\033\uffc2\034\070\035\uffc2\036\uffc2" +
    "\042\uffc2\043\060\044\uffc2\045\073\046\057\051\074\053" +
    "\062\054\066\055\056\056\064\057\054\001\002\000\056" +
    "\010\uffce\025\uffce\026\uffce\027\065\030\071\031\uffce\032" +
    "\uffce\033\uffce\034\070\035\uffce\036\uffce\042\uffce\043\060" +
    "\044\uffce\045\uffce\046\uffce\051\uffce\053\062\054\066\055" +
    "\056\056\064\057\054\001\002\000\056\010\uffc7\025\067" +
    "\026\063\027\065\030\071\031\055\032\uffc7\033\uffc7\034" +
    "\070\035\uffc7\036\uffc7\042\uffc7\043\060\044\uffc7\045\073" +
    "\046\057\051\uffc7\053\062\054\066\055\056\056\064\057" +
    "\054\001\002\000\056\010\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\070\035\uffcb\036" +
    "\uffcb\042\uffcb\043\060\044\uffcb\045\uffcb\046\uffcb\051\uffcb" +
    "\053\062\054\066\055\056\056\064\057\054\001\002\000" +
    "\056\010\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\046\uffda\051\uffda\053\uffda\054\uffda" +
    "\055\uffda\056\uffda\057\uffda\001\002\000\056\010\uffcd\025" +
    "\uffcd\026\uffcd\027\065\030\071\031\uffcd\032\uffcd\033\uffcd" +
    "\034\070\035\uffcd\036\uffcd\042\uffcd\043\060\044\uffcd\045" +
    "\uffcd\046\uffcd\051\uffcd\053\062\054\066\055\056\056\064" +
    "\057\054\001\002\000\056\010\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\070\035\uffd3" +
    "\036\uffd3\042\uffd3\043\060\044\uffd3\045\uffd3\046\uffd3\051" +
    "\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\001\002" +
    "\000\056\010\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\070\035\uffcc\036\uffcc\042\uffcc" +
    "\043\060\044\uffcc\045\uffcc\046\uffcc\051\uffcc\053\062\054" +
    "\066\055\056\056\064\057\054\001\002\000\056\010\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\070\035\uffd0\036\uffd0\042\uffd0\043\060\044\uffd0" +
    "\045\uffd0\046\uffd0\051\uffd0\053\062\054\066\055\056\056" +
    "\uffd0\057\uffd0\001\002\000\056\010\uffca\025\uffca\026\uffca" +
    "\027\065\030\071\031\uffca\032\uffca\033\uffca\034\070\035" +
    "\uffca\036\uffca\042\uffca\043\060\044\uffca\045\uffca\046\uffca" +
    "\051\uffca\053\062\054\066\055\056\056\064\057\054\001" +
    "\002\000\056\010\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\070\035\uffd1\036\uffd1\042" +
    "\uffd1\043\060\044\uffd1\045\uffd1\046\uffd1\051\uffd1\053\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\057\uffd1\001\002\000\004\041" +
    "\uffe5\001\002\000\050\002\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\020\uffe8\033\uffe8\037\uffe8\040\uffe8\050\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\001\002\000\036\007\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\033\uffeb\037\uffeb" +
    "\040\uffeb\050\uffeb\052\uffeb\053\uffeb\054\uffeb\001\002\000" +
    "\050\002\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\020\uffec\033" +
    "\uffec\037\uffec\040\uffec\050\uffec\052\uffec\053\uffec\054\uffec" +
    "\001\002\000\050\002\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\020\uffe6\033\uffe6\037\uffe6\040\uffe6\050\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\001\002\000\036\007\033\011\022\012\017" +
    "\013\031\014\026\015\005\016\004\033\113\037\114\040" +
    "\122\050\030\052\021\053\011\054\010\001\002\000\036" +
    "\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\033\uffea\037\uffea\040\uffea\050\uffea\052\uffea\053\uffea" +
    "\054\uffea\001\002\000\036\007\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\033\uffe9\037\uffe9\040\uffe9" +
    "\050\uffe9\052\uffe9\053\uffe9\054\uffe9\001\002\000\050\002" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\033\uffe7\037" +
    "\uffe7\040\uffe7\050\uffe7\052\uffe7\053\uffe7\054\uffe7\001\002" +
    "\000\044\025\067\026\063\027\065\030\071\031\055\032" +
    "\072\034\070\043\060\044\124\045\073\046\057\051\074" +
    "\053\062\054\066\055\056\056\064\057\054\001\002\000" +
    "\056\010\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\051\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\001\002\000\056\010\uffc9\025" +
    "\uffc9\026\uffc9\027\065\030\071\031\uffc9\032\uffc9\033\uffc9" +
    "\034\070\035\uffc9\036\uffc9\042\uffc9\043\060\044\uffc9\045" +
    "\uffc9\046\uffc9\051\uffc9\053\062\054\066\055\056\056\064" +
    "\057\054\001\002\000\056\010\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\070\035\uffd2" +
    "\036\uffd2\042\uffd2\043\060\044\uffd2\045\uffd2\046\uffd2\051" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\001\002" +
    "\000\056\010\uffc8\025\067\026\063\027\065\030\071\031" +
    "\uffc8\032\uffc8\033\uffc8\034\070\035\uffc8\036\uffc8\042\uffc8" +
    "\043\060\044\uffc8\045\073\046\057\051\uffc8\053\062\054" +
    "\066\055\056\056\064\057\054\001\002\000\056\010\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\070\035\uffcf\036\uffcf\042\uffcf\043\060\044\uffcf" +
    "\045\uffcf\046\uffcf\051\uffcf\053\062\054\066\055\056\056" +
    "\uffcf\057\uffcf\001\002\000\044\025\067\026\063\027\065" +
    "\030\071\031\055\032\072\034\070\042\132\043\060\045" +
    "\073\046\057\051\074\053\062\054\066\055\056\056\064" +
    "\057\054\001\002\000\056\010\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\051" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\001\002" +
    "\000\042\012\037\013\046\014\044\016\135\017\041\021" +
    "\036\022\051\023\045\024\053\036\uffa6\041\050\042\uffa6" +
    "\043\040\050\042\056\043\057\035\001\002\000\006\036" +
    "\142\042\143\001\002\000\054\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb\041" +
    "\133\042\uffdb\043\uffdb\045\uffdb\046\uffdb\047\140\051\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\001\002\000" +
    "\050\025\067\026\063\027\065\030\071\031\055\032\072" +
    "\033\uffa3\034\070\036\uffa3\042\uffa3\043\060\045\073\046" +
    "\057\051\074\053\062\054\066\055\056\056\064\057\054" +
    "\001\002\000\010\033\uffa5\036\uffa5\042\uffa5\001\002\000" +
    "\036\012\037\013\046\014\044\016\047\017\041\021\036" +
    "\022\051\023\045\024\053\041\050\043\040\050\042\056" +
    "\043\057\035\001\002\000\050\025\067\026\063\027\065" +
    "\030\071\031\055\032\072\033\uffa2\034\070\036\uffa2\042" +
    "\uffa2\043\060\045\073\046\057\051\074\053\062\054\066" +
    "\055\056\056\064\057\054\001\002\000\040\012\uffaf\013" +
    "\uffaf\014\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\036\145\041\uffaf\043\uffaf\050\uffaf\056\uffaf\057" +
    "\uffaf\001\002\000\056\010\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\051\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\001\002\000" +
    "\036\012\037\013\046\014\044\016\135\017\041\021\036" +
    "\022\051\023\045\024\053\041\050\043\040\050\042\056" +
    "\043\057\035\001\002\000\052\007\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\036\145\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\050\uffaf\056\uffaf\057\uffaf\001\002\000\050\007" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\050\uffb0\056\uffb0\057\uffb0\001\002" +
    "\000\010\033\uffa4\036\uffa4\042\uffa4\001\002\000\042\012" +
    "\037\013\046\014\044\016\135\017\041\021\036\022\051" +
    "\023\045\024\053\036\uffa6\041\050\042\uffa6\043\040\050" +
    "\042\056\043\057\035\001\002\000\006\036\142\042\152" +
    "\001\002\000\104\010\uffbc\012\037\013\046\014\044\016" +
    "\047\017\041\021\036\022\051\023\045\024\053\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\041\050\042\uffbc\043\040\044\uffbc" +
    "\045\uffbc\046\uffbc\050\042\051\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\056\043\057\035\001\002\000\056\010\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\051\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057" +
    "\uffbe\001\002\000\056\010\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\051\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\001\002\000" +
    "\042\012\037\013\046\014\044\016\135\017\041\021\036" +
    "\022\051\023\045\024\053\036\uffa6\041\050\042\uffa6\043" +
    "\040\050\042\056\043\057\035\001\002\000\006\036\142" +
    "\042\157\001\002\000\104\010\uffbc\012\037\013\046\014" +
    "\044\016\047\017\041\021\036\022\051\023\045\024\053" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\041\050\042\uffbc\043\040" +
    "\044\uffbc\045\uffbc\046\uffbc\050\042\051\uffbc\053\uffbc\054" +
    "\uffbc\055\uffbc\056\043\057\035\001\002\000\056\010\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\051\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\001\002\000\056\010\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\070\035" +
    "\uffc6\036\uffc6\042\uffc6\043\060\044\uffc6\045\uffc6\046\uffc6" +
    "\051\uffc6\053\062\054\066\055\056\056\uffc6\057\uffc6\001" +
    "\002\000\056\010\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\070\035\uffc4\036\uffc4\042" +
    "\uffc4\043\060\044\uffc4\045\uffc4\046\uffc4\051\uffc4\053\062" +
    "\054\066\055\056\056\uffc4\057\uffc4\001\002\000\044\007" +
    "\171\011\167\012\166\013\046\014\044\015\163\016\047" +
    "\017\041\021\036\022\051\023\045\024\053\041\202\043" +
    "\040\050\042\056\043\057\035\001\002\000\006\036\uffad" +
    "\044\uffad\001\002\000\050\025\067\026\063\027\065\030" +
    "\071\031\055\032\072\034\070\035\234\036\uffae\043\060" +
    "\044\uffae\045\073\046\057\051\074\053\062\054\066\055" +
    "\056\056\064\057\054\001\002\000\004\041\227\001\002" +
    "\000\004\041\215\001\002\000\004\044\214\001\002\000" +
    "\004\041\206\001\002\000\006\036\173\044\uffaf\001\002" +
    "\000\050\007\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\036\145\041\uffaf\043\uffaf\044\uffaf\050\uffaf\056\uffaf\057" +
    "\uffaf\001\002\000\004\044\175\001\002\000\056\010\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\051\uffd4\053\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\001\002\000\046\007\171\011\167\012\166" +
    "\013\046\014\044\015\163\016\047\017\041\021\036\022" +
    "\051\023\045\024\053\041\202\043\040\044\uffb0\050\042" +
    "\056\043\057\035\001\002\000\012\010\uffb2\036\uffb2\042" +
    "\uffb2\044\uffb2\001\002\000\012\010\uffb4\036\uffb4\042\uffb4" +
    "\044\uffb4\001\002\000\052\010\uffb1\025\067\026\063\027" +
    "\065\030\071\031\055\032\072\034\070\036\uffb1\042\uffb1" +
    "\043\060\044\uffb1\045\073\046\057\051\074\053\062\054" +
    "\066\055\056\056\064\057\054\001\002\000\044\007\171" +
    "\011\167\012\166\013\046\014\044\015\163\016\047\017" +
    "\041\021\036\022\051\023\045\024\053\041\050\043\040" +
    "\050\042\056\043\057\035\001\002\000\006\036\uffac\044" +
    "\uffac\001\002\000\004\042\205\001\002\000\012\010\uffb3" +
    "\036\uffb3\042\uffb3\044\uffb3\001\002\000\036\012\037\013" +
    "\046\014\044\016\047\017\041\021\036\022\051\023\045" +
    "\024\053\041\050\043\040\050\042\056\043\057\035\001" +
    "\002\000\044\025\067\026\063\027\065\030\071\031\055" +
    "\032\072\034\070\042\210\043\060\045\073\046\057\051" +
    "\074\053\062\054\066\055\056\056\064\057\054\001\002" +
    "\000\044\007\171\011\167\012\166\013\046\014\044\015" +
    "\163\016\047\017\041\021\036\022\051\023\045\024\053" +
    "\041\202\043\040\050\042\056\043\057\035\001\002\000" +
    "\012\010\212\036\uffb6\042\uffb6\044\uffb6\001\002\000\044" +
    "\007\171\011\167\012\166\013\046\014\044\015\163\016" +
    "\047\017\041\021\036\022\051\023\045\024\053\041\202" +
    "\043\040\050\042\056\043\057\035\001\002\000\012\010" +
    "\uffb5\036\uffb5\042\uffb5\044\uffb5\001\002\000\056\010\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\051\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\001\002\000\044\012\037\013\046\014\044" +
    "\016\135\017\041\021\036\022\051\023\045\024\053\033" +
    "\uffa6\036\uffa6\041\050\042\uffa6\043\040\050\042\056\043" +
    "\057\035\001\002\000\010\033\217\036\142\042\220\001" +
    "\002\000\036\012\037\013\046\014\044\016\047\017\041" +
    "\021\036\022\051\023\045\024\053\041\050\043\040\050" +
    "\042\056\043\057\035\001\002\000\044\007\171\011\167" +
    "\012\166\013\046\014\044\015\163\016\047\017\041\021" +
    "\036\022\051\023\045\024\053\041\202\043\040\050\042" +
    "\056\043\057\035\001\002\000\012\010\uffb8\036\uffb8\042" +
    "\uffb8\044\uffb8\001\002\000\044\025\067\026\063\027\065" +
    "\030\071\031\055\032\072\033\223\034\070\043\060\045" +
    "\073\046\057\051\074\053\062\054\066\055\056\056\064" +
    "\057\054\001\002\000\042\012\037\013\046\014\044\016" +
    "\135\017\041\021\036\022\051\023\045\024\053\036\uffa6" +
    "\041\050\042\uffa6\043\040\050\042\056\043\057\035\001" +
    "\002\000\006\036\142\042\225\001\002\000\044\007\171" +
    "\011\167\012\166\013\046\014\044\015\163\016\047\017" +
    "\041\021\036\022\051\023\045\024\053\041\202\043\040" +
    "\050\042\056\043\057\035\001\002\000\012\010\uffb7\036" +
    "\uffb7\042\uffb7\044\uffb7\001\002\000\042\012\037\013\046" +
    "\014\044\016\135\017\041\021\036\022\051\023\045\024" +
    "\053\036\uffa6\041\050\042\uffa6\043\040\050\042\056\043" +
    "\057\035\001\002\000\006\036\142\042\231\001\002\000" +
    "\044\007\171\011\167\012\166\013\046\014\044\015\163" +
    "\016\047\017\041\021\036\022\051\023\045\024\053\041" +
    "\202\043\040\050\042\056\043\057\035\001\002\000\012" +
    "\010\uffba\036\uffba\042\uffba\044\uffba\001\002\000\056\010" +
    "\uffbf\025\067\026\063\027\065\030\071\031\055\032\072" +
    "\033\uffbf\034\070\035\uffbf\036\uffbf\042\uffbf\043\060\044" +
    "\uffbf\045\073\046\057\051\074\053\062\054\066\055\056" +
    "\056\064\057\054\001\002\000\036\012\037\013\046\014" +
    "\044\016\047\017\041\021\036\022\051\023\045\024\053" +
    "\041\050\043\040\050\042\056\043\057\035\001\002\000" +
    "\046\025\067\026\063\027\065\030\071\031\055\032\072" +
    "\034\070\035\237\043\060\044\236\045\073\046\057\051" +
    "\074\053\062\054\066\055\056\056\064\057\054\001\002" +
    "\000\056\010\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\046\uffd7\051\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\001\002\000\036\012\037" +
    "\013\046\014\044\016\047\017\041\021\036\022\051\023" +
    "\045\024\053\041\050\043\040\050\042\056\043\057\035" +
    "\001\002\000\044\025\067\026\063\027\065\030\071\031" +
    "\055\032\072\034\070\043\060\044\241\045\073\046\057" +
    "\051\074\053\062\054\066\055\056\056\064\057\054\001" +
    "\002\000\056\010\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\051\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\056\uffd6\057\uffd6\001\002\000\012\010" +
    "\uffb9\036\uffb9\042\uffb9\044\uffb9\001\002\000\042\012\037" +
    "\013\046\014\044\016\135\017\041\021\036\022\051\023" +
    "\045\024\053\036\uffa6\041\050\042\uffa6\043\040\050\042" +
    "\056\043\057\035\001\002\000\006\036\142\042\245\001" +
    "\002\000\036\012\037\013\046\014\044\016\047\017\041" +
    "\021\036\022\051\023\045\024\053\041\050\043\040\050" +
    "\042\056\043\057\035\001\002\000\056\010\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\070\035\uffc5\036\uffc5\042\uffc5\043\060\044\uffc5\045\uffc5" +
    "\046\uffc5\051\uffc5\053\062\054\066\055\056\056\uffc5\057" +
    "\uffc5\001\002\000\050\002\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\020\ufff0\033\ufff0\037\ufff0\040\ufff0\050\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\001\002\000\050\002\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\020\ufff4\033\ufff4\037\ufff4\040\ufff4\050" +
    "\ufff4\052\ufff4\053\ufff4\054\ufff4\001\002\000\042\012\037" +
    "\013\046\014\044\016\135\017\041\021\036\022\051\023" +
    "\045\024\053\036\uffa6\041\050\042\uffa6\043\040\050\042" +
    "\056\043\057\035\001\002\000\006\036\142\042\253\001" +
    "\002\000\034\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\033\uffdf\037\uffdf\050\uffdf\052\uffdf\053" +
    "\uffdf\054\uffdf\001\002\000\004\002\001\001\002\000\050" +
    "\002\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\020\ufff3\033\ufff3" +
    "\037\ufff3\040\ufff3\050\ufff3\052\ufff3\053\ufff3\054\ufff3\001" +
    "\002\000\004\002\uffff\001\002\000\004\041\260\001\002" +
    "\000\010\016\263\036\uffab\042\uffab\001\002\000\006\036" +
    "\267\042\uffaf\001\002\000\006\036\uffaa\042\uffaa\001\002" +
    "\000\010\036\uffa8\042\uffa8\047\264\001\002\000\036\012" +
    "\037\013\046\014\044\016\047\017\041\021\036\022\051" +
    "\023\045\024\053\041\050\043\040\050\042\056\043\057" +
    "\035\001\002\000\046\025\067\026\063\027\065\030\071" +
    "\031\055\032\072\034\070\036\uffa7\042\uffa7\043\060\045" +
    "\073\046\057\051\074\053\062\054\066\055\056\056\064" +
    "\057\054\001\002\000\004\042\272\001\002\000\010\016" +
    "\uffaf\036\145\042\uffaf\001\002\000\006\016\263\042\uffb0" +
    "\001\002\000\006\036\uffa9\042\uffa9\001\002\000\040\005" +
    "\016\006\014\007\033\011\022\012\017\013\031\014\026" +
    "\015\005\016\004\033\006\037\015\050\030\052\021\053" +
    "\011\054\010\001\002\000\046\002\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\020\ufff9\033\ufff9\037\ufff9\040\ufff9\050\ufff9\052\ufff9" +
    "\053\ufff9\054\ufff9\001\002\000\042\005\016\006\014\007" +
    "\033\011\022\012\017\013\031\014\026\015\005\016\004" +
    "\033\006\037\015\040\ufff7\050\030\052\021\053\011\054" +
    "\010\001\002\000\004\040\276\001\002\000\046\002\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\020\ufffc\033\ufffc\037\ufffc\040\ufffc" +
    "\050\ufffc\052\ufffc\053\ufffc\054\ufffc\001\002\000\004\040" +
    "\ufff6\001\002\000\004\041\301\001\002\000\010\016\263" +
    "\036\uffab\042\uffab\001\002\000\006\036\267\042\uffaf\001" +
    "\002\000\004\042\304\001\002\000\004\047\305\001\002" +
    "\000\036\012\037\013\046\014\044\016\047\017\041\021" +
    "\036\022\051\023\045\024\053\041\050\043\040\050\042" +
    "\056\043\057\035\001\002\000\044\025\067\026\063\027" +
    "\065\030\071\031\055\032\072\033\307\034\070\043\060" +
    "\045\073\046\057\051\074\053\062\054\066\055\056\056" +
    "\064\057\054\001\002\000\046\002\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016" +
    "\ufff8\020\ufff8\033\ufff8\037\ufff8\040\ufff8\050\ufff8\052\ufff8" +
    "\053\ufff8\054\ufff8\001\002\000\034\007\033\011\022\012" +
    "\017\013\031\014\026\015\005\016\112\033\113\037\114" +
    "\050\030\052\021\053\011\054\010\001\002\000\050\002" +
    "\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\020\uffed\033\uffed\037" +
    "\uffed\040\uffed\050\uffed\052\uffed\053\uffed\054\uffed\001\002" +
    "\000\050\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2" +
    "\033\ufff2\037\ufff2\040\ufff2\050\ufff2\052\ufff2\053\ufff2\054" +
    "\ufff2\001\002\000\050\002\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\020\ufff1\033\ufff1\037\ufff1\040\ufff1\050\ufff1\052\ufff1" +
    "\053\ufff1\054\ufff1\001\002\000\004\002\ufffe\001\002\000" +
    "\036\012\037\013\046\014\044\016\047\017\041\021\036" +
    "\022\051\023\045\024\053\041\050\043\040\050\042\056" +
    "\043\057\035\001\002\000\044\025\067\026\063\027\065" +
    "\030\071\031\055\032\072\033\317\034\070\043\060\045" +
    "\073\046\057\051\074\053\062\054\066\055\056\056\064" +
    "\057\054\001\002\000\046\002\ufff5\005\ufff5\006\ufff5\007" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\020\ufff5\033\ufff5\037\ufff5\040\ufff5\050\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\022\002\022\003\006\005\026\006\024\007" +
    "\011\010\012\013\023\014\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\313\003" +
    "\006\005\026\006\024\007\011\010\012\013\023\014\031" +
    "\001\001\000\014\006\312\007\011\010\012\013\023\014" +
    "\031\001\001\000\014\006\311\007\011\010\012\013\023" +
    "\014\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\273\004\274\005\026\006\024" +
    "\007\011\010\012\013\023\014\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\255\003\006\005\026" +
    "\006\024\007\011\010\012\013\023\014\031\001\001\000" +
    "\014\006\254\007\011\010\012\013\023\014\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\247\007\011\010\012\013\023\014\031\001\001\000" +
    "\002\001\001\000\016\006\115\007\011\010\012\012\246" +
    "\013\023\014\031\001\001\000\002\001\001\000\004\015" +
    "\051\001\001\000\004\015\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\164\017\163\022\167\023" +
    "\171\001\001\000\002\001\001\000\004\015\161\001\001" +
    "\000\004\015\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\127\001\001\000\004\015\126\001\001" +
    "\000\004\015\125\001\001\000\004\015\124\001\001\000" +
    "\004\015\122\001\001\000\016\006\115\007\011\010\012" +
    "\012\114\013\023\014\031\001\001\000\004\015\110\001" +
    "\001\000\004\015\107\001\001\000\004\015\106\001\001" +
    "\000\004\015\105\001\001\000\004\015\104\001\001\000" +
    "\004\015\103\001\001\000\002\001\001\000\004\015\101" +
    "\001\001\000\004\015\100\001\001\000\004\015\077\001" +
    "\001\000\004\015\074\001\001\000\002\001\001\000\004" +
    "\015\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\120\006\115\007\011" +
    "\010\012\012\117\013\023\014\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\135\026\133\027\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\140\001\001\000\002\001\001\000" +
    "\004\022\143\001\001\000\002\001\001\000\006\015\135" +
    "\027\146\001\001\000\004\022\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\135\026\150\027\136" +
    "\001\001\000\002\001\001\000\006\015\153\016\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\135" +
    "\026\155\027\136\001\001\000\002\001\001\000\006\015" +
    "\153\016\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\200\017\177\020\176\021" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\173\001\001\000\004\022\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\200\017" +
    "\177\020\176\021\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\130\017\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\206\001\001\000\002\001\001\000\012\015" +
    "\200\017\177\020\176\021\210\001\001\000\002\001\001" +
    "\000\012\015\200\017\177\020\176\021\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\135\026\215" +
    "\027\136\001\001\000\002\001\001\000\004\015\221\001" +
    "\001\000\012\015\200\017\177\020\176\021\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\135\026" +
    "\223\027\136\001\001\000\002\001\001\000\012\015\200" +
    "\017\177\020\176\021\225\001\001\000\002\001\001\000" +
    "\010\015\135\026\227\027\136\001\001\000\002\001\001" +
    "\000\010\015\232\017\177\020\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\135\026\243\027\136\001\001\000\002\001\001\000" +
    "\004\015\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\135\026\251\027\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\260\025\261\001\001\000\004\022\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\267" +
    "\001\001\000\004\025\270\001\001\000\002\001\001\000" +
    "\020\003\272\005\026\006\024\007\011\010\012\013\023" +
    "\014\031\001\001\000\002\001\001\000\022\003\273\004" +
    "\276\005\026\006\024\007\011\010\012\013\023\014\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\301\025\261\001\001" +
    "\000\004\022\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\115\007\011\010\012\012\310\013" +
    "\023\014\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\315\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$OpenScadParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$OpenScadParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$OpenScadParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$OpenScadParser$actions {
  private final OpenScadParser parser;

  /** Constructor */
  CUP$OpenScadParser$actions(OpenScadParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$OpenScadParser$do_action_part00000000(
    int                        CUP$OpenScadParser$act_num,
    java_cup.runtime.lr_parser CUP$OpenScadParser$parser,
    java.util.Stack            CUP$OpenScadParser$stack,
    int                        CUP$OpenScadParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$OpenScadParser$result;

      /* select the action based on the action number */
      switch (CUP$OpenScadParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= input EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		InputNode start_val = (InputNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		RESULT = start_val;
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$OpenScadParser$parser.done_parsing();
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // input ::= 
            {
              InputNode RESULT =null;
		  RESULT = InputNode.createEmpty(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("input",0, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // input ::= TOK_USE input 
            {
              InputNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		InputNode i = (InputNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		  RESULT = InputNode.createUse(u, i); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("input",0, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // input ::= statement input 
            {
              InputNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		InputNode i = (InputNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		  RESULT = InputNode.createStatement(s, i); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("input",0, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= SEMICOLON 
            {
              StatementNode RESULT =null;
		 RESULT = StatementNode.createSemicolon(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= BRACKET_CURLY_OPEN inner_input BRACKET_CURLY_CLOSE 
            {
              StatementNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		InnerInputNode i = (InnerInputNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		  RESULT = StatementNode.createInnerInput(i); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= module_instantiation 
            {
              StatementNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ModuleInstantiationNode m = (ModuleInstantiationNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = StatementNode.createModuleInstantiation(m); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= assignment 
            {
              StatementNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		AssignmentNode a = (AssignmentNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = StatementNode.createAssignment(a); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= TOK_MODULE TOK_ID BRACKET_ROUND_OPEN arguments_decl optional_commas BRACKET_ROUND_CLOSE statement 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-5)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).right;
		ArgumentsDeclNode ad = (ArgumentsDeclNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		OptionalCommasNode oc = (OptionalCommasNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = StatementNode.createModuleDefinition(id, ad, oc, s); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-6)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= TOK_FUNCTION TOK_ID BRACKET_ROUND_OPEN arguments_decl optional_commas BRACKET_ROUND_CLOSE EQUAL expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-7)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-5)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-5)).right;
		ArgumentsDeclNode ad = (ArgumentsDeclNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-5)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)).right;
		OptionalCommasNode oc = (OptionalCommasNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		 RESULT = StatementNode.createFunctionDefinition(id, ad, oc, e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-8)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inner_input ::= 
            {
              InnerInputNode RESULT =null;
		 RESULT = InnerInputNode.createEmpty(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("inner_input",2, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inner_input ::= statement inner_input 
            {
              InnerInputNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		InnerInputNode i = (InnerInputNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = InnerInputNode.createStatement(s, i); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("inner_input",2, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // assignment ::= TOK_ID EQUAL expr SEMICOLON 
            {
              AssignmentNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		 RESULT = AssignmentNode.createAssignment(id, e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("assignment",3, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // module_instantiation ::= EXCLAMATION_MARK module_instantiation 
            {
              ModuleInstantiationNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ModuleInstantiationNode m = (ModuleInstantiationNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ModuleInstantiationNode.createWithExclamationMark(m); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("module_instantiation",4, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // module_instantiation ::= HASH module_instantiation 
            {
              ModuleInstantiationNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ModuleInstantiationNode m = (ModuleInstantiationNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ModuleInstantiationNode.createWithHash(m); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("module_instantiation",4, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // module_instantiation ::= PERCENT module_instantiation 
            {
              ModuleInstantiationNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ModuleInstantiationNode m = (ModuleInstantiationNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ModuleInstantiationNode.createWithPercent(m); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("module_instantiation",4, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // module_instantiation ::= ASTERISK module_instantiation 
            {
              ModuleInstantiationNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ModuleInstantiationNode m = (ModuleInstantiationNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ModuleInstantiationNode.createWithAsterisk(m); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("module_instantiation",4, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // module_instantiation ::= single_module_instantiation child_statement 
            {
              ModuleInstantiationNode RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int smright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		SingleModuleInstantiationNode sm = (SingleModuleInstantiationNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ChildStatementNode cs = (ChildStatementNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ModuleInstantiationNode.createSingle(sm, cs); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("module_instantiation",4, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // module_instantiation ::= ifelse_statement 
            {
              ModuleInstantiationNode RESULT =null;
		int iesleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int iesright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		IfElseStatementNode ies = (IfElseStatementNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ModuleInstantiationNode.createIfElse(ies); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("module_instantiation",4, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ifelse_statement ::= if_statement 
            {
              IfElseStatementNode RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		IfStatementNode is = (IfStatementNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = IfElseStatementNode.createIf(is); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("ifelse_statement",5, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ifelse_statement ::= if_statement TOK_ELSE child_statement 
            {
              IfElseStatementNode RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		IfStatementNode is = (IfStatementNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ChildStatementNode cs = (ChildStatementNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = IfElseStatementNode.createIfElse(is, cs); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("ifelse_statement",5, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if_statement ::= TOK_IF BRACKET_ROUND_OPEN expr BRACKET_ROUND_CLOSE child_statement 
            {
              IfStatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ChildStatementNode cs = (ChildStatementNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = IfStatementNode.createIf(e, cs); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("if_statement",6, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // child_statements ::= 
            {
              ChildStatementsNode RESULT =null;
		 RESULT = ChildStatementsNode.createEmpty(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("child_statements",7, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // child_statements ::= child_statements child_statement 
            {
              ChildStatementsNode RESULT =null;
		int cssleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		ChildStatementsNode css = (ChildStatementsNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ChildStatementNode cs = (ChildStatementNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ChildStatementsNode.createChildStatement(css, cs); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("child_statements",7, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // child_statements ::= child_statements assignment 
            {
              ChildStatementsNode RESULT =null;
		int cssleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		ChildStatementsNode css = (ChildStatementsNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		AssignmentNode a = (AssignmentNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ChildStatementsNode.createAssignment(css, a); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("child_statements",7, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // child_statement ::= SEMICOLON 
            {
              ChildStatementNode RESULT =null;
		 RESULT = ChildStatementNode.createSemicolon(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("child_statement",8, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // child_statement ::= BRACKET_CURLY_OPEN child_statements BRACKET_CURLY_CLOSE 
            {
              ChildStatementNode RESULT =null;
		int cssleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int cssright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		ChildStatementsNode css = (ChildStatementsNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		 RESULT = ChildStatementNode.createChildStatements(css); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("child_statement",8, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // child_statement ::= module_instantiation 
            {
              ChildStatementNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ModuleInstantiationNode m = (ModuleInstantiationNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ChildStatementNode.createModuleInstantiation(m); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("child_statement",8, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // module_id ::= TOK_ID 
            {
              ModuleIdNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 /*System.out.println("Module ID: " +  i); */
            RESULT = ModuleIdNode.createId(id); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("module_id",9, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // module_id ::= TOK_FOR 
            {
              ModuleIdNode RESULT =null;
		 RESULT = ModuleIdNode.createFor(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("module_id",9, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // module_id ::= TOK_LET 
            {
              ModuleIdNode RESULT =null;
		 RESULT = ModuleIdNode.createLet(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("module_id",9, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // module_id ::= TOK_ASSERT 
            {
              ModuleIdNode RESULT =null;
		 RESULT = ModuleIdNode.createAssert(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("module_id",9, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // module_id ::= TOK_ECHO 
            {
              ModuleIdNode RESULT =null;
		 RESULT = ModuleIdNode.createEcho(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("module_id",9, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // module_id ::= TOK_EACH 
            {
              ModuleIdNode RESULT =null;
		 RESULT = ModuleIdNode.createEach(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("module_id",9, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // single_module_instantiation ::= module_id BRACKET_ROUND_OPEN arguments_call BRACKET_ROUND_CLOSE 
            {
              SingleModuleInstantiationNode RESULT =null;
		int midleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).left;
		int midright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).right;
		ModuleIdNode mid = (ModuleIdNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		ArgumentsCallNode ac = (ArgumentsCallNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		 RESULT = SingleModuleInstantiationNode.createSingle(mid, ac); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("single_module_instantiation",10, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= TOK_TRUE 
            {
              ExprNode RESULT =null;
		 RESULT = ExprNode.createTrue(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= TOK_FALSE 
            {
              ExprNode RESULT =null;
		 RESULT = ExprNode.createFalse(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= TOK_UNDEF 
            {
              ExprNode RESULT =null;
		 RESULT = ExprNode.createUndef(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= TOK_ID 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createId(id); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr DOT TOK_ID 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createExprDotId(e, id); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= TOK_STRING 
            {
              ExprNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 /* System.out.println("String: " + s); */
          RESULT = ExprNode.createString(s); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= TOK_NUMBER 
            {
              ExprNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 /* System.out.println("Number value: " + (Double) n); */
           RESULT = ExprNode.createNumber(n); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= BRACKET_SQUARE_OPEN expr COLON expr BRACKET_SQUARE_CLOSE 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		 RESULT = ExprNode.createExprColonExpr(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= BRACKET_SQUARE_OPEN expr COLON expr COLON expr BRACKET_SQUARE_CLOSE 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-5)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		ExprNode e3 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		 RESULT = ExprNode.createExprColonExprColonExpr(e1, e2, e3); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-6)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= BRACKET_SQUARE_OPEN optional_commas BRACKET_SQUARE_CLOSE 
            {
              ExprNode RESULT =null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		OptionalCommasNode oc = (OptionalCommasNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		 RESULT = ExprNode.createOptionalCommas(oc); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= BRACKET_SQUARE_OPEN vector_expr optional_commas BRACKET_SQUARE_CLOSE 
            {
              ExprNode RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		VectorExprNode ve = (VectorExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		OptionalCommasNode oc = (OptionalCommasNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		 RESULT = ExprNode.createVector(ve, oc); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr ASTERISK expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createMultiplication(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr SLASH expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createDivision(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr PERCENT expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createModulo(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr PLUS expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createAddition(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr MINUS expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createSubtraction(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr BRACKET_ANGLE_OPEN expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createLess(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr LE expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createLessEqual(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr EQ expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createEqual(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr NE expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createNotEqual(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr GE expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createGreaterEqual(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr BRACKET_ANGLE_CLOSE expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createGreater(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr AND expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createAnd(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr OR expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createOr(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= PLUS expr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createUnaryPlus(e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= MINUS expr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createUnaryMinus(e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= EXCLAMATION_MARK expr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createNot(e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= BRACKET_ROUND_OPEN expr BRACKET_ROUND_CLOSE 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		 RESULT = ExprNode.createParentheses(e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= expr QUESTION_MARK expr COLON expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e3 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createTernary(e1,e2, e3); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr BRACKET_SQUARE_OPEN expr BRACKET_SQUARE_CLOSE 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		 RESULT = ExprNode.createArrayAccess(e1, e2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= TOK_ID BRACKET_ROUND_OPEN arguments_call BRACKET_ROUND_CLOSE 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		ArgumentsCallNode ac = (ArgumentsCallNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		 RESULT = ExprNode.createFunctionCall(id, ac); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= TOK_LET BRACKET_ROUND_OPEN arguments_call BRACKET_ROUND_CLOSE expr 
            {
              ExprNode RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ArgumentsCallNode ac = (ArgumentsCallNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createLet(ac, e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= TOK_ASSERT BRACKET_ROUND_OPEN arguments_call BRACKET_ROUND_CLOSE expr_or_empty 
            {
              ExprNode RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ArgumentsCallNode ac = (ArgumentsCallNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprOrEmptyNode e = (ExprOrEmptyNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createAssert(ac, e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= TOK_ECHO BRACKET_ROUND_OPEN arguments_call BRACKET_ROUND_CLOSE expr_or_empty 
            {
              ExprNode RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ArgumentsCallNode ac = (ArgumentsCallNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprOrEmptyNode e = (ExprOrEmptyNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprNode.createEcho(ac, e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_or_empty ::= 
            {
              ExprOrEmptyNode RESULT =null;
		 RESULT = ExprOrEmptyNode.createEmpty(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr_or_empty",12, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_or_empty ::= expr 
            {
              ExprOrEmptyNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ExprOrEmptyNode.createExpr(e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("expr_or_empty",12, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // list_comprehension_elements ::= TOK_LET BRACKET_ROUND_OPEN arguments_call BRACKET_ROUND_CLOSE list_comprehension_elements_p 
            {
              ListComprehensionElementsNode RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ArgumentsCallNode ac = (ArgumentsCallNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int lcespleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int lcespright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ListComprehensionElementsPNode lcesp = (ListComprehensionElementsPNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ListComprehensionElementsNode.createLet(ac, lcesp); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("list_comprehension_elements",13, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // list_comprehension_elements ::= TOK_EACH list_comprehension_elements_or_expr 
            {
              ListComprehensionElementsNode RESULT =null;
		int lceseleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int lceseright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ListComprehensionElementsOrExprNode lcese = (ListComprehensionElementsOrExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ListComprehensionElementsNode.createEach(lcese); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("list_comprehension_elements",13, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // list_comprehension_elements ::= TOK_FOR BRACKET_ROUND_OPEN arguments_call BRACKET_ROUND_CLOSE list_comprehension_elements_or_expr 
            {
              ListComprehensionElementsNode RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ArgumentsCallNode ac = (ArgumentsCallNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int lceseleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int lceseright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ListComprehensionElementsOrExprNode lcese = (ListComprehensionElementsOrExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ListComprehensionElementsNode.createFor(ac, lcese); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("list_comprehension_elements",13, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // list_comprehension_elements ::= TOK_FOR BRACKET_ROUND_OPEN arguments_call SEMICOLON expr SEMICOLON arguments_call BRACKET_ROUND_CLOSE list_comprehension_elements_or_expr 
            {
              ListComprehensionElementsNode RESULT =null;
		int ac1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-6)).left;
		int ac1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-6)).right;
		ArgumentsCallNode ac1 = (ArgumentsCallNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)).value;
		int ac2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int ac2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ArgumentsCallNode ac2 = (ArgumentsCallNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int lceseleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int lceseright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ListComprehensionElementsOrExprNode lcese = (ListComprehensionElementsOrExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ListComprehensionElementsNode.createForWithSemicolons(ac1, e, ac2, lcese); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("list_comprehension_elements",13, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-8)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // list_comprehension_elements ::= TOK_IF BRACKET_ROUND_OPEN expr BRACKET_ROUND_CLOSE list_comprehension_elements_or_expr 
            {
              ListComprehensionElementsNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int lceseleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int lceseright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ListComprehensionElementsOrExprNode lcese = (ListComprehensionElementsOrExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ListComprehensionElementsNode.createIf(e, lcese); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("list_comprehension_elements",13, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // list_comprehension_elements ::= TOK_IF BRACKET_ROUND_OPEN expr BRACKET_ROUND_CLOSE list_comprehension_elements_or_expr TOK_ELSE list_comprehension_elements_or_expr 
            {
              ListComprehensionElementsNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-4)).value;
		int lcese1left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int lcese1right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		ListComprehensionElementsOrExprNode lcese1 = (ListComprehensionElementsOrExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int lcese2left = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int lcese2right = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ListComprehensionElementsOrExprNode lcese2 = (ListComprehensionElementsOrExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ListComprehensionElementsNode.createIfElse(e, lcese1, lcese2); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("list_comprehension_elements",13, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-6)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // list_comprehension_elements_p ::= list_comprehension_elements 
            {
              ListComprehensionElementsPNode RESULT =null;
		int lcesleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int lcesright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ListComprehensionElementsNode lces = (ListComprehensionElementsNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ListComprehensionElementsPNode.createList(lces); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("list_comprehension_elements_p",14, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // list_comprehension_elements_p ::= BRACKET_ROUND_OPEN list_comprehension_elements BRACKET_ROUND_CLOSE 
            {
              ListComprehensionElementsPNode RESULT =null;
		int lcesleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int lcesright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		ListComprehensionElementsNode lces = (ListComprehensionElementsNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		 RESULT = ListComprehensionElementsPNode.createParentheses(lces); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("list_comprehension_elements_p",14, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // list_comprehension_elements_or_expr ::= list_comprehension_elements_p 
            {
              ListComprehensionElementsOrExprNode RESULT =null;
		int lcespleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int lcespright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ListComprehensionElementsPNode lcesp = (ListComprehensionElementsPNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ListComprehensionElementsOrExprNode.createListP(lcesp); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("list_comprehension_elements_or_expr",15, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // list_comprehension_elements_or_expr ::= expr 
            {
              ListComprehensionElementsOrExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ListComprehensionElementsOrExprNode.createExpr(e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("list_comprehension_elements_or_expr",15, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // optional_commas ::= COMMA optional_commas 
            {
              OptionalCommasNode RESULT =null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		OptionalCommasNode oc = (OptionalCommasNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = OptionalCommasNode.createComma(oc); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("optional_commas",16, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // optional_commas ::= 
            {
              OptionalCommasNode RESULT =null;
		 RESULT = OptionalCommasNode.createEmpty(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("optional_commas",16, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // vector_expr ::= expr 
            {
              VectorExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = VectorExprNode.createExpr(e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("vector_expr",17, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // vector_expr ::= list_comprehension_elements 
            {
              VectorExprNode RESULT =null;
		int lcesleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int lcesright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ListComprehensionElementsNode lces = (ListComprehensionElementsNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = VectorExprNode.createListComprehensionElements(lces); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("vector_expr",17, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // vector_expr ::= vector_expr COMMA optional_commas list_comprehension_elements_or_expr 
            {
              VectorExprNode RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).right;
		VectorExprNode ve = (VectorExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		OptionalCommasNode oc = (OptionalCommasNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		int lceseleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int lceseright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ListComprehensionElementsOrExprNode lcese = (ListComprehensionElementsOrExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = VectorExprNode.createWithComma(ve, oc, lcese); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("vector_expr",17, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // arguments_decl ::= 
            {
              ArgumentsDeclNode RESULT =null;
		 RESULT = ArgumentsDeclNode.createEmpty(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("arguments_decl",18, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arguments_decl ::= argument_decl 
            {
              ArgumentsDeclNode RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ArgumentDeclNode ad = (ArgumentDeclNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ArgumentsDeclNode.createArgumentDecl(ad); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("arguments_decl",18, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arguments_decl ::= arguments_decl COMMA optional_commas argument_decl 
            {
              ArgumentsDeclNode RESULT =null;
		int asdleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).left;
		int asdright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).right;
		ArgumentsDeclNode asd = (ArgumentsDeclNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		OptionalCommasNode oc = (OptionalCommasNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ArgumentDeclNode ad = (ArgumentDeclNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ArgumentsDeclNode.createWithComma(asd, oc, ad); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("arguments_decl",18, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // argument_decl ::= TOK_ID 
            {
              ArgumentDeclNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ArgumentDeclNode.createId(id); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("argument_decl",19, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // argument_decl ::= TOK_ID EQUAL expr 
            {
              ArgumentDeclNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ArgumentDeclNode.createIdExpr(id, e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("argument_decl",19, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arguments_call ::= 
            {
              ArgumentsCallNode RESULT =null;
		 RESULT = ArgumentsCallNode.createEmpty(); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("arguments_call",20, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arguments_call ::= argument_call 
            {
              ArgumentsCallNode RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ArgumentCallNode ac = (ArgumentCallNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ArgumentsCallNode.createArgumentCall(ac); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("arguments_call",20, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arguments_call ::= arguments_call COMMA optional_commas argument_call 
            {
              ArgumentsCallNode RESULT =null;
		int ascleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).left;
		int ascright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).right;
		ArgumentsCallNode asc = (ArgumentsCallNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).right;
		OptionalCommasNode oc = (OptionalCommasNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ArgumentCallNode ac = (ArgumentCallNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ArgumentsCallNode.createWithComma(asc, oc, ac); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("arguments_call",20, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-3)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // argument_call ::= expr 
            {
              ArgumentCallNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ArgumentCallNode.createExpr(e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("argument_call",21, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // argument_call ::= TOK_ID EQUAL expr 
            {
              ArgumentCallNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$OpenScadParser$stack.peek()).value;
		 RESULT = ArgumentCallNode.createIdExpr(id, e); 
              CUP$OpenScadParser$result = parser.getSymbolFactory().newSymbol("argument_call",21, ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.elementAt(CUP$OpenScadParser$top-2)), ((java_cup.runtime.Symbol)CUP$OpenScadParser$stack.peek()), RESULT);
            }
          return CUP$OpenScadParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$OpenScadParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$OpenScadParser$do_action(
    int                        CUP$OpenScadParser$act_num,
    java_cup.runtime.lr_parser CUP$OpenScadParser$parser,
    java.util.Stack            CUP$OpenScadParser$stack,
    int                        CUP$OpenScadParser$top)
    throws java.lang.Exception
    {
              return CUP$OpenScadParser$do_action_part00000000(
                               CUP$OpenScadParser$act_num,
                               CUP$OpenScadParser$parser,
                               CUP$OpenScadParser$stack,
                               CUP$OpenScadParser$top);
    }
}

}
